7 ^ 2
install.packages("pacman")
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes, ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny, stringr, tidyr)
clear
install.packages(c("assertthat", "backports", "BH", "blob", "broom", "caTools", "cli", "curl", "dbplyr", "digest", "dplyr", "evaluate", "fansi", "forcats", "glue", "haven", "highr", "hms", "httpuv", "httr", "jsonlite", "knitr", "later", "lattice", "lazyeval", "markdown", "mime", "mongolite", "nlme", "odbc", "openssl", "packrat", "pillar", "pkgconfig", "profvis", "purrr", "R6", "Rcpp", "RCurl", "readr", "readxl", "rJava", "RJSONIO", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "sparklyr", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "tinytex", "xfun", "xml2", "xtable"))
install.packages(c("assertthat", "backports", "BH", "blob", "broom", "caTools", "cli", "curl", "dbplyr", "digest", "dplyr", "evaluate", "fansi", "forcats", "glue", "haven", "highr", "hms", "httpuv", "httr", "jsonlite", "knitr", "later", "lattice", "lazyeval", "markdown", "mime", "mongolite", "nlme", "odbc", "openssl", "packrat", "pillar", "pkgconfig", "profvis", "purrr", "R6", "Rcpp", "RCurl", "readr", "readxl", "rJava", "RJSONIO", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "sparklyr", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "tinytex", "xfun", "xml2", "xtable"))
x = 11
x <- 11
x <- 9
print(x)
11 + 14
x = 9
y = 11
x + y =z
x + y = z
(x+y) <- z
clearPushBack()
x - y
x <- c(1,3,5,7,9)
seq(from=1, to=7, by=1)
rep(seq(from=2, to=5, by=0.25), times=5)
rep(c(“Male”, “Female”), times=3)
rep(c(male, female), times=3)
rep(c("male", "female"), times=2)
install.packages("epiR")
library(epiR)
install.packages(c("askpass", "backports", "BH", "bit", "blob", "caTools", "cli", "clipr", "curl", "DBI", "dbplyr", "digest", "dplyr", "ellipsis", "evaluate", "fansi", "forcats", "glue", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "later", "markdown", "mime", "mongolite", "odbc", "openssl", "pillar", "pkgconfig", "PKI", "prettyunits", "profvis", "progress", "promises", "purrr", "R6", "Rcpp", "RCurl", "rJava", "RJDBC", "RJSONIO", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "sparklyr", "stringi", "sys", "tibble", "tidyr", "tidyselect", "tinytex", "withr", "xfun", "xml2", "yaml"))
# Create a vector of courses (e.g., MATH 101) you have taken previously.
# Make sure you have at least 8 courses. Name the vector myCourses
myCourses <- c("IT 101", "IT 106", "IT 109", "IT 206", "IT 209", "CS 112", "CS 211")
# Create a vector of courses (e.g., MATH 101) you have taken previously.
# Make sure you have at least 8 courses. Name the vector myCourses
myCourses <- c("IT 101", "IT 106", "IT 109", "IT 206", "IT 209", "CS 112", "CS 211", "DAEN 500", "HIST 103", "CALC 1")
# Get the length of the vector myCourses
length(myCourses)
# Get the first two courses from myCourses
myCourses[0:2]
# Get the first two courses from myCourses
myCourses[1:2]
# Get the 3rd and 4th courses from myCourses
myCourses[3:4]
# Sort myCourses using a method
sort(myCourses, decreasing = FALSE)
# Sort myCourse in the reverse direction
sort(myCourses, decreasing = TRUE)
# Create a vector of courses (e.g., MATH 101) you have taken previously.
# Make sure you have at least 8 courses. Name the vector myCourses
myCourses <- c("IT 101", "IT 106", "IT 109", "IT 206", "IT 209", "CS 112", "CS 211", "DAEN 500", "HIST 103", "CALC 1")
# Get the length of the vector myCourses
length(myCourses)
# Get the first two courses from myCourses
myCourses[1:2]
# Get the 3rd and 4th courses from myCourses
myCourses[3:4]
# Sort myCourses using a method
sort(myCourses, decreasing = FALSE)
# Sort myCourse in the reverse direction
sort(myCourses, decreasing = TRUE)
rm(list = ls())
# Create a vector of courses (e.g., MATH 101) you have taken previously.
# Make sure you have at least 8 courses. Name the vector myCourses
myCourses <- c("IT 101", "IT 106", "IT 109", "IT 206", "IT 209", "CS 112", "CS 211", "DAEN 500", "HIST 103", "CALC 1")
# Get the length of the vector myCourses
length(myCourses)
# Get the first two courses from myCourses
myCourses[1:2]
# Get the 3rd and 4th courses from myCourses
myCourses[3:4]
# Sort myCourses using a method
sort(myCourses, decreasing = FALSE)
# Sort myCourse in the reverse direction
sort(myCourses, decreasing = TRUE)
rm(list = ls())
TRUE <- "true"
math <- 15 * 1.76
math_square_root <- sqrt(math)
x <- 1.76
math <- 15 * x
math_square_root <- sqrt(math)
library(tidyr)
install.packages(c("backports", "BH", "bit", "bit64", "caTools", "cli", "clipr", "codetools", "config", "DBI", "dbplyr", "digest", "dplyr", "ellipsis", "epiR", "fansi", "fastmap", "generics", "globals", "glue", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "later", "magrittr", "Matrix", "mongolite", "odbc", "openssl", "pillar", "PKI", "profvis", "promises", "r2d3", "R6", "Rcpp", "RCurl", "readr", "rJava", "RJSONIO", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "shiny", "sparklyr", "stringi", "survival", "sys", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "withr", "xfun"))
install.packages("rJava")
month <- c("jan", "jan", "feb", "feb")
profit <- c(0, 50, 50, 90)
fmonth1 <- factor(month, levels=c("jan", "feb"))
fmonth2 <- factor(month, levels=c("jan", "feb"), labels=c("January", "February"))
fmonth3 <- reorder(fmonth2, profit)
fmonth4 <- reorder(fmonth2, -profit)
levels(fmonth1)
as.character(fmonth2)
levels(fmonth3)
levels(fmonth4)
vocab <- c("one", "two", "red", "blue")
select <- c(TRUE, FALSE, TRUE, TRUE)
vocab[select]
vocab[ vocab != "red"]
vocab[vocab != vocab[1]]
x <- 1:4
y <- 2:3
x + y
x <- runif(n=100)
cat("R version =", paste(R.version$major, R.version$minor, sep="."), "\n")
print(cat("R version =", paste(R.version$major, R.version$minor, sep="."), "\n"))
cat("R version =", paste(R.version$major, R.version$minor, sep="."), "\n")))
install.packages(c("forcats", "knitr", "rappdirs", "rJava", "withr"))
# Load in Tidyverse
library(tidyverse)
# Load in Tidyverse
library(tidyverse)
install.packages("tidyverse")
# Load in Tidyverse
library(tidyverse)
install.packages("car")
install.packages("cluster")
install.packages("coefplot")
install.packages("corrplot")
install.packages("GGally")
install.packages("ggmap")
install.packages("glmnet")
install.packages("gridExtra")
install.packages("ISLR")
install.packages("knitr")
install.packages("leaps")
install.packages("maps")
install.packages("MASS")
install.packages("micromapST")
install.packages("randomForest")
install.packages("rpart")
install.packages("tidyr")
install.packages("tinytex")
install.packages("useful")
install.packages("lubridate")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("plotly")
install.packages("mlr3")
install.packages("data.table")
install.packages("xgboost")
install.packages("caret")
install.packages("sqldf")
library("coefplot", lib.loc="~/opt/anaconda3/lib/R/library")
install.packages("rJava")
# Load in Tidyverse
library(tidyverse)
# Load in the diamonds data set stored within R
data(diamonds)
# Number of records
nrow(diamonds)
# Load in the diamonds data set stored within R
df <- data(diamonds)
# Load in the diamonds data set stored within R
data(diamonds)
# Number of records
nrow(diamonds)
View(diamonds)
# Cleanup
rm(list=ls())
gc(verbose = TRUE, reset = TRUE)
# Load in Tidyverse
library(tidyverse)
# Load in the diamonds data set stored within R
data(diamonds)
# Number of records
nrow(diamonds)
#
result <- (nrow(diamonds))^(1/3)
#
print(nrow(diamonds)**(1/3))
View(diamonds)
# Mean
print(mean(diamonds$price))
# Mean
diamonds$price.mean
View(diamonds)
# Mean
mean(diamonds$price)
# Mean
print(mean(diamonds$price))
# Median
print(median(diamonds$price))
# Interquartile Range
print(IQR(diamonds$price))
MaxPriceData <- diamonds[max(diamonds$price)]
MaxPriceData <- diamonds[max(diamonds$price),]
View(MaxPriceData)
View(diamonds)
View(MaxPriceData)
tail(diamonds$price)
View(diamonds)
View(MaxPriceData)
subset(diamonds, price == max(price))
subset(diamonds, price == max(price))
MaxPriceData <- diamonds[max(diamonds$price),]
View(MaxPriceData)
View(diamonds)
max(diamonds$price)
MaxPriceData <- diamonds[,max(diamonds$price)]
diamonds[max(diamonds$price),]
max(diamonds$price)
MaxPriceData <- max(diamonds$price)
MaxPriceData
MaxPriceData <- diamonds[(diamonds$price.max),]
max(diamonds$price)
MaxPriceData <- diamonds[max(diamonds$price),]
View(MaxPriceData)
View(MaxPriceData)
View(diamonds)
MaxPriceData <- diamonds[which.max(diamonds$price),]
View(MaxPriceData)
View(MaxPriceData)
diamonds$clarity
ClarityData <- factor(diamonds$clarity, levels=rev(levels(diamonds$clarity)))
print(ClarityData)
table(ClarityData)
ClarityData <- factor(diamonds$clarity,
levels=rev(levels(diamonds$clarity)),
labels = c("Internally flawless", "Very very slightly included 1", "Very very slightly included 2",
"Very slightly included 1", "Very slightly included 2", "Slightly included 1", "Slightly included 2",
"Included 1"))
table(ClarityData)
table(ClarityData) <- factor(diamonds$clarity,
levels=rev(levels(diamonds$clarity)),
labels = c("Internally flawless", "Very very slightly included 1", "Very very slightly included 2",
"Very slightly included 1", "Very slightly included 2", "Slightly included 1", "Slightly included 2",
"Included 1"))
# Clean Up
rm(list=ls())
gc(verbose = TRUE, reset = TRUE)
format(memory.size(), units = "MB")
y <- as.integer(c(1, 1.33, 1.67, 2))
z <- seq(2, 2, length = 15)
print(z)
z <- seq(2, ((2**1) + 1), length = 6)
print(z)
z <- seq(2, (2 + 1), length = 6)
print(z)
z <- seq(1, (2 + 1), length = 6)
print(z)
z <- seq(1.5, (2 + 1), length = 6)
print(z)
y <- as.integer(c(1, 1.33, 1.67, 2)))
y <- as.integer(c(1, 1.33, 1.67, 2))
print(y)
# Create a sequence
x <- seq(y, y+1, length(15))
# Create a sequence
x <- seq(y, y+1, length = 15)
# Create a sequence
x <- seq(2, 2+1, lenght = 3)
# Create a sequence
x <- seq(2, 2+1, length = 3)
print(x)
y <- c(x)
print(y)
# Clean Up
rm(list=ls())
gc(verbose = TRUE, reset = TRUE)
format(memory.size(), units = "MB")
v <- 5:13
print(v)
# Creating a sequence from 6.6 to 12.6.
v <- 6.6:12.6
print(v)
print(seq(1, 7, by = 0.4))
print(seq(1, 7, by = 0.67))
print(seq(1, 7, by = 0.45))
print(seq(1, 7, by = 0.43))
print(seq(1, 7, by = 0.70))
print(seq(1, 7, by = 0.36))
print(seq(2, 7, by = 0.40))
print(seq(2, 7, by = 0.45))
print(seq(2, 4, by = 0.45))
print(seq(2, 4, by = 0.40))
print(seq(2, 4, by = 0.35))
print(seq(2, 4, by = 0.30))
print(seq(2, 4, by = 0.39))
print(seq(2, 4, by = 0.35))
print(seq(2, 4, by = 0.376))
print(seq(2, 3, by = 0.45))
print(seq(2, 4, by = 0.45))
print(seq(2, 5, by = 0.45))
print(seq(2, 4, by = 0.43))
print(seq(2, 4, by = 0.60))
print(seq(2, 4, by = 0.39))
print(seq(4, 7, by = 0.45))
print(seq(4, 7, by = 0.60))
print(seq(4, 7, by = 0.65))
print(seq(4, 6, by = 0.65))
print(seq(4, 6, by = 0.70))
print(seq(4, 7, by = 0.35))
print(seq(1.3:7.3))
print(seq(1.3:7.3, by = 0.40))
print(seq(1.3, 7.3, by = 0.40))
print(seq(1.3, 7.3, by = 0.39))
print(seq(1.3, 7.3, by = 0.37))
print(seq(1.3, 7.3, by = 0.33))
print(seq(1.25, 7.75, by = 0.25))
print(seq(1.25, 7.75, by = 0.30))
print(seq(1.25, 7.75, by = 0.29))
print(seq(1.25, 4.15, by = 0.29))
z <- seq(5.25, 7.75, by = 0.29)
print(seq(5.25, 7.75, by = 0.29))
print(seq(5.25, 8, by = 0.29))
x <- seq(1.25, 4.15, by = 0.29)
# Clean Up
rm(list=ls())
gc(verbose = TRUE, reset = TRUE)
format(memory.size(), units = "MB")
x <- as.integer(seq(1.25, 4.15, by = 0.29))
y <- as.integer(seq(5.25, 8, by = 0.29))
print(x)
x <- as.integer(seq(1.30, 4.15, by = 0.29))
print(x)
x <- as.integer(seq(1.35, 4.3, by = 0.29))
print(x)
# Clean Up
rm(list=ls())
gc(verbose = TRUE, reset = TRUE)
x <- as.integer(seq(1.40, 4.5, by = 0.29))
y <- as.integer(seq(5.25, 8, by = 0.29))
print(y)
y <- seq(5.25, 8, by = 0.29)
print(y)
y <- as.integer(seq(5, 7, by = 0.30))
print(y)
y <- as.integer(seq(5, 7, by = 0.33))
print(y)
y <- as.integer(seq(5, 8, by = 0.33))
print(y)
y <- as.integer(seq(5, 8, by = 0.45))
print(y)
y <- as.integer(seq(5, 8, by = 0.43))
print(y)
y <- as.integer(seq(4, 8, by = 0.45))
print(y)
y <- as.integer(seq(5, 8, by = 0.38))
print(y)
y <- as.integer(seq(5, 8, by = 0.37))
print(y)
x <- as.integer(seq(1, 4, by = 0.37))
print(x)
panel_num <- c(x, 4, y)
print(panel_num)
# Clean Up
rm(list=ls())
gc(verbose = TRUE, reset = TRUE)
format(memory.size(), units = "MB")
### Question 2.1 - Prints the installed version of R by executing the following R code:
clecat("R version =", paste(R.version$major, R.version$minor, sep="."), "\n")
### Question 2.2 - Prints “Hello World”.
print("Hello World")
### Question 2.1 - Prints the installed version of R by executing the following R code:
clecat("R version =", paste(R.version$major, R.version$minor, sep="."), "\n")
# Clean Up, reset memory as well clear our the env pane
rm(list=ls())
gc(verbose = TRUE, reset = TRUE)
format(memory.size(), units = "MB")
### Question 2.1 - Prints the installed version of R by executing the following R code:
cat("R version =", paste(R.version$major, R.version$minor, sep="."), "\n")
### Question 2.2 - Prints “Hello World”.
print("Hello World")
# Load in Tidyverse
library(tidyverse)
# Load in the diamonds data set stored within R.
data(diamonds)
# Number of records. Determines its number of records, denoted n.
nrow(diamonds)
# Prints the result of raising n to the 1/3 power.
print(nrow(diamonds)**(1/3))
# Mean
print(mean(diamonds$price))
# Median
print(median(diamonds$price))
# Interquartile Range
print(IQR(diamonds$price))
MaxPriceData <- diamonds[which.max(diamonds$price),]
# Creates the factoe vector that reverse orders the clarity data within the diamonds data set, and labels them
ClarityData <- factor(diamonds$clarity,
levels=rev(levels(diamonds$clarity)),
labels = c("Internally flawless", "Very very slightly included 1", "Very very slightly included 2",
"Very slightly included 1", "Very slightly included 2", "Slightly included 1",
"Slightly included 2", "Included 1"))
# Outputs a Table of the factor vector
table(ClarityData)
# Create an integer actomic vector sequence where the range starts from 1 to 4 & 5 to 8 incrementing by 0.37
# This is necessary to get the required output and vector length
# We do this using the sequence function, then placing that within the as.integer function which will round down to the nearest int
x <- as.integer(seq(1, 4, by = 0.37))
y <- as.integer(seq(5, 8, by = 0.37))
# Now that we've created our 2 needed vectors, notice the number 4 is missing, and in the required output within the PDF
# integer 4 only appears once, we can use the c() function to concatenate x to 4 then to y, this is then stored within a
# variable panel_num
panel_num <- c(x, 4, y)
# Print the final sequence to the console
print(panel_num)
View(MaxPriceData)
# Clean Up, reset memory as well clear our the env pane
rm(list=ls())
gc(verbose = TRUE, reset = TRUE)
format(memory.size(), units = "MB")
cat("R version =", paste(R.version$major, R.version$minor, sep="."), "\n")
print("Hello World")
library(tidyverse)
data(diamonds)
nrow(diamonds)
print(nrow(diamonds)**(1/3))
print(mean(diamonds$price))
print(median(diamonds$price))
print(IQR(diamonds$price))
MaxPriceData <- diamonds[which.max(diamonds$price),]
View(MaxPriceData)
ClarityData <- factor(diamonds$clarity,
levels=rev(levels(diamonds$clarity)),
labels = c("Internally flawless", "Very very slightly included 1", "Very very slightly included 2",
"Very slightly included 1", "Very slightly included 2", "Slightly included 1",
"Slightly included 2", "Included 1"))
table(ClarityData)
x <- as.integer(seq(1, 4, by = 0.37))
y <- as.integer(seq(5, 8, by = 0.37))
panel_num <- c(x, 4, y)
print(panel_num)
# Number of records. Determines its number of records, denoted n.
n <- nrow(diamonds)
# Prints the result of raising n to the 1/3 power.
print((n)**(1/3))
# Clean Up, reset memory as well clear our the env pane
rm(list=ls())
gc(verbose = TRUE, reset = TRUE)
format(memory.size(), units = "MB")
# Clean Up, reset memory as well clear our the env pane
rm(list=ls())
gc(verbose = TRUE, reset = TRUE)
format(memory.size(), units = "MB")
install.packages("tinytex")
tinytex::install_tinytex()
# Clean Up, reset memory as well clear our the env pane
rm(list=ls())
gc(verbose = TRUE, reset = TRUE)
format(memory.size(), units = "MB")
install.packages(c("broom", "cpp11", "crayon", "matrixStats", "mlbench", "rJava", "tibble"))
# Load in Tidyverse
library(tidyverse)
# Load in the diamonds data set stored within R.
data(diamonds)
# Number of records. Determines its number of records, denoted n.
n <- nrow(diamonds)
# Prints the result of raising n to the 1/3 power.
print((n)**(1/3))
# Mean
print(mean(diamonds$price))
# Median
print(median(diamonds$price))
# Interquartile Range
print(IQR(diamonds$price))
# Assign to the variable MaxPriceData the query being executed from the above instructions of question 2.5
MaxPriceData <- diamonds[which.max(diamonds$price),]
# Print MaxPriceData object to the console
print(MaxPriceData)
# Clean Up, reset memory as well clear our the env pane
rm(list=ls())
gc(verbose = TRUE, reset = TRUE)
format(memory.size(), units = "MB")
install.packages("rJava")
clear
install.packages(c("cli", "rappdirs", "rJava"))
install.packages(c("cachem", "dbplyr", "dplyr", "rJava"))
clear
library(tidyverse)
install.packages(c("cachem", "nlme", "PKI", "rJava"))
### Question 2.1 - Prints the installed version of R by executing the following R code:
cat("R version =", paste(R.version$major, R.version$minor, sep="."), "\n")
setwd("~/Documents/Github_Projects/Project 9 - Data Visual Analysis on Smoking")
